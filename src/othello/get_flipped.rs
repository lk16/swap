/// Compute flipped discs when moving to a given square.
///
/// `player` is the bitboard of the player's discs.
/// `opponent` is the bitboard of the opponent's discs.
/// `index` is the index of the square of the move
///
/// Uses flip functions like in flip_bitscan.c in Edax.
pub fn get_flipped(player: u64, opponent: u64, index: usize) -> u64 {
    FLIP[index](player, opponent)
}

type FlipFn = fn(u64, u64) -> u64;

static FLIP: [FlipFn; 64] = [
    flip_a1, flip_b1, flip_c1, flip_d1, flip_e1, flip_f1, flip_g1, flip_h1, flip_a2, flip_b2,
    flip_c2, flip_d2, flip_e2, flip_f2, flip_g2, flip_h2, flip_a3, flip_b3, flip_c3, flip_d3,
    flip_e3, flip_f3, flip_g3, flip_h3, flip_a4, flip_b4, flip_c4, flip_d4, flip_e4, flip_f4,
    flip_g4, flip_h4, flip_a5, flip_b5, flip_c5, flip_d5, flip_e5, flip_f5, flip_g5, flip_h5,
    flip_a6, flip_b6, flip_c6, flip_d6, flip_e6, flip_f6, flip_g6, flip_h6, flip_a7, flip_b7,
    flip_c7, flip_d7, flip_e7, flip_f7, flip_g7, flip_h7, flip_a8, flip_b8, flip_c8, flip_d8,
    flip_e8, flip_f8, flip_g8, flip_h8,
];

const OUTFLANK_2: [u8; 64] = [
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00,
];

const OUTFLANK_3: [u8; 64] = [
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00,
];

const OUTFLANK_4: [u8; 64] = [
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

const OUTFLANK_5: [u8; 64] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

const OUTFLANK_7: [u8; 64] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
];

const FLIPPED_2: [u8; 130] = [
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3d,
];

#[rustfmt::skip]
const FLIPPED_3_H: [u64; 131] = [
    0x0000000000000000, 0x0606060606060606, 0x0404040404040404, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x1010101010101010, 0x1616161616161616, 0x1414141414141414,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3030303030303030,
    0x3636363636363636, 0x3434343434343434, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x7070707070707070, 0x7676767676767676,
    0x7474747474747474,
];

#[rustfmt::skip]
const FLIPPED_4_H: [u64; 133] = [
    0x0000000000000000, 0x0e0e0e0e0e0e0e0e, 0x0c0c0c0c0c0c0c0c, 0x0000000000000000, 0x0808080808080808,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x2020202020202020,
    0x2e2e2e2e2e2e2e2e, 0x2c2c2c2c2c2c2c2c, 0x0000000000000000, 0x2828282828282828, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x6060606060606060, 0x6e6e6e6e6e6e6e6e,
    0x6c6c6c6c6c6c6c6c, 0x0000000000000000, 0x6868686868686868,
];

const FLIPPED_5: [u8; 137] = [
    0x00, 0x0f, 0x0e, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x2f, 0x2e, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x28,
];

#[rustfmt::skip]
const FLIPPED_3_V: [u64; 131] = [
    0x0000000000000000, 0x0000000000ffff00, 0x0000000000ff0000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x000000ff00000000, 0x000000ff00ffff00, 0x000000ff00ff0000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000ffff00000000,
    0x0000ffff00ffff00, 0x0000ffff00ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00ffffff00000000, 0x00ffffff00ffff00,
    0x00ffffff00ff0000,
];

#[rustfmt::skip]
const FLIPPED_4_V: [u64; 133] = [
    0x0000000000000000, 0x00000000ffffff00, 0x00000000ffff0000, 0x0000000000000000, 0x00000000ff000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000ff0000000000,
    0x0000ff00ffffff00, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000ff00ff000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00ffff0000000000, 0x00ffff00ffffff00,
    0x00ffff00ffff0000, 0x0000000000000000, 0x00ffff00ff000000,
    ];

#[rustfmt::skip]
const FLIPPED_3_U: [u64; 131] = [
    0x0000000000000000, 0x00ffff0000000000, 0x0000ff0000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x00000000ff000000, 0x00ffff00ff000000, 0x0000ff00ff000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000ffff0000,
    0x00ffff00ffff0000, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000ffffff00, 0x00ffff00ffffff00,
    0x0000ff00ffffff00,
];

fn flip_a1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0101010101010100).wrapping_add(0x0000000000000100)) & p & 0x0101010101010100;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0101010101010100;
    let outflank_h = ((o & 0x000000000000007e).wrapping_add(0x0000000000000002)) & p;
    flipped |= (outflank_h - u64::from(outflank_h != 0)) & 0x000000000000007e;
    let outflank_d9 =
        ((o | !0x8040201008040200).wrapping_add(0x0000000000000200)) & p & 0x8040201008040200;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x8040201008040200;

    flipped
}

fn flip_b1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0202020202020200).wrapping_add(0x0000000000000200)) & p & 0x0202020202020200;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0202020202020200;
    let outflank_h = ((o & 0x000000000000007c).wrapping_add(0x0000000000000004)) & p;
    flipped |= (outflank_h - u64::from(outflank_h != 0)) & 0x000000000000007c;
    let outflank_d9 =
        ((o | !0x0080402010080400).wrapping_add(0x0000000000000400)) & p & 0x0080402010080400;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0080402010080400;

    flipped
}

fn flip_c1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0404040404040400).wrapping_add(0x0000000000000400)) & p & 0x0404040404040400;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0404040404040400;
    let outflank_h = OUTFLANK_2[((o >> 1) & 0x3f) as usize] as u64 & p;
    flipped |= (FLIPPED_2[outflank_h as usize] as u64) << 1;
    flipped |= (p >> 7) & 0x0000000000000200 & o;
    let outflank_d9 =
        ((o | !0x0000804020100800).wrapping_add(0x0000000000000800)) & p & 0x0000804020100800;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0000804020100800;

    flipped
}

fn flip_d1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0808080808080800).wrapping_add(0x0000000000000800)) & p & 0x0808080808080800;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0808080808080800;
    let outflank_h = OUTFLANK_3[((o >> 1) & 0x3f) as usize] as u64 & p;
    flipped |= FLIPPED_3_H[outflank_h as usize] & 0xff;
    let outflank_d7 =
        ((o | !0x0000000001020400).wrapping_add(0x0000000000000400)) & p & 0x0000000001020400;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0000000001020400;
    let outflank_d9 =
        ((o | !0x0000008040201000).wrapping_add(0x0000000000001000)) & p & 0x0000008040201000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0000008040201000;

    flipped
}

fn flip_e1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x1010101010101000).wrapping_add(0x0000000000001000)) & p & 0x1010101010101000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x1010101010101000;
    let outflank_h = OUTFLANK_4[((o >> 1) & 0x3f) as usize] as u64 & p;
    flipped |= FLIPPED_4_H[outflank_h as usize] & 0xff;
    let outflank_d7 =
        ((o | !0x0000000102040800).wrapping_add(0x0000000000000800)) & p & 0x0000000102040800;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0000000102040800;
    let outflank_d9 =
        ((o | !0x0000000080402000).wrapping_add(0x0000000000002000)) & p & 0x0000000080402000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0000000080402000;

    flipped
}

fn flip_f1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x2020202020202000).wrapping_add(0x0000000000002000)) & p & 0x2020202020202000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x2020202020202000;
    let outflank_h = OUTFLANK_5[((o >> 1) & 0x3f) as usize] as u64 & p;
    flipped |= (FLIPPED_5[outflank_h as usize] as u64) << 1;
    let outflank_d7 =
        ((o | !0x0000010204081000).wrapping_add(0x0000000000001000)) & p & 0x0000010204081000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0000010204081000;
    flipped |= (p >> 9) & 0x0000000000004000 & o;

    flipped
}

fn flip_g1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x4040404040404000).wrapping_add(0x0000000000004000)) & p & 0x4040404040404000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x4040404040404000;
    let outflank_h = OUTFLANK_7[(o & 0x3e) as usize] as u64 & (p << 1);
    flipped |= (outflank_h.wrapping_neg()) & 0x3e;
    let outflank_d7 =
        ((o | !0x0001020408102000).wrapping_add(0x0000000000002000)) & p & 0x0001020408102000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0001020408102000;

    flipped
}

fn flip_h1(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x8080808080808000).wrapping_add(0x0000000000008000)) & p & 0x8080808080808000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x8080808080808000;
    let outflank_h = OUTFLANK_7[((o >> 1) & 0x3f) as usize] as u64 & p;
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 1;
    let outflank_d7 =
        ((o | !0x0102040810204000).wrapping_add(0x0000000000004000)) & p & 0x0102040810204000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0102040810204000;

    flipped
}

fn flip_a2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0101010101010000).wrapping_add(0x0000000000010000)) & p & 0x0101010101010000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0101010101010000;
    let outflank_h = ((o & 0x0000000000007e00).wrapping_add(0x0000000000000200)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007e00;
    let outflank_d9 =
        ((o | !0x4020100804020000).wrapping_add(0x0000000000020000)) & p & 0x4020100804020000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x4020100804020000;

    flipped
}

fn flip_b2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0202020202020000).wrapping_add(0x0000000000020000)) & p & 0x0202020202020000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0202020202020000;
    let outflank_h = ((o & 0x0000000000007c00).wrapping_add(0x0000000000000400)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007c00;
    let outflank_d9 =
        ((o | !0x8040201008040000).wrapping_add(0x0000000000040000)) & p & 0x8040201008040000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x8040201008040000;

    flipped
}

fn flip_c2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0404040404040000).wrapping_add(0x0000000000040000)) & p & 0x0404040404040000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0404040404040000;
    let outflank_h = OUTFLANK_2[((o >> 9) & 0x3f) as usize] as u64 & (p >> 8);
    flipped |= (FLIPPED_2[outflank_h as usize] as u64) << 9;
    flipped |= (p >> 7) & 0x0000000000020000 & o;
    let outflank_d9 =
        ((o | !0x0080402010080000).wrapping_add(0x0000000000080000)) & p & 0x0080402010080400;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0080402010080000;

    flipped
}

fn flip_d2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0808080808080000).wrapping_add(0x0000000000080000)) & p & 0x0808080808080000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0808080808080000;
    let outflank_h = OUTFLANK_3[((o >> 9) & 0x3f) as usize] as u64 & (p >> 8);
    flipped |= FLIPPED_3_H[outflank_h as usize] & 0x000000000000ff00;
    let outflank_d7 =
        ((o | !0x0000000102040000).wrapping_add(0x0000000000040000)) & p & 0x0000000102040000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0000000102040000;
    let outflank_d9 =
        ((o | !0x0000804020100000).wrapping_add(0x0000000000100000)) & p & 0x0000804020100000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0000804020100000;

    flipped
}

fn flip_e2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x1010101010100000).wrapping_add(0x0000000000100000)) & p & 0x1010101010100000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x1010101010100000;
    let outflank_h = OUTFLANK_4[((o >> 9) & 0x3f) as usize] as u64 & (p >> 8);
    flipped |= FLIPPED_4_H[outflank_h as usize] & 0x000000000000ff00;
    let outflank_d7 =
        ((o | !0x0000010204080000).wrapping_add(0x0000000000080000)) & p & 0x0000010204080000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0000010204080000;
    let outflank_d9 =
        ((o | !0x0000008040200000).wrapping_add(0x0000000000200000)) & p & 0x0000008040200000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0000008040200000;

    flipped
}

fn flip_f2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x2020202020200000).wrapping_add(0x0000000000200000)) & p & 0x2020202020200000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x2020202020200000;
    let outflank_h = OUTFLANK_5[((o >> 9) & 0x3f) as usize] as u64 & (p >> 8);
    flipped |= (FLIPPED_5[outflank_h as usize] as u64) << 9;
    let outflank_d7 =
        ((o | !0x0001020408100000).wrapping_add(0x0000000000100000)) & p & 0x0001020408100000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0001020408100000;
    flipped |= (p >> 9) & 0x0000000000400000 & o;

    flipped
}

fn flip_g2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x4040404040400000).wrapping_add(0x0000000000400000)) & p & 0x4040404040400000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x4040404040400000;
    let outflank_h = OUTFLANK_7[((o >> 8) & 0x3e) as usize] as u64 & (p >> 7);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 8;
    let outflank_d7 =
        ((o | !0x0102040810200000).wrapping_add(0x0000000000200000)) & p & 0x0102040810200000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0102040810200000;

    flipped
}

fn flip_h2(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x8080808080800000).wrapping_add(0x0000000000800000)) & p & 0x8080808080800000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x8080808080800000;
    let outflank_h = OUTFLANK_7[((o >> 9) & 0x3f) as usize] as u64 & (p >> 8);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 9;
    let outflank_d7 =
        ((o | !0x0204081020400000).wrapping_add(0x0000000000400000)) & p & 0x0204081020400000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0204081020400000;

    flipped
}

fn flip_a3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0101010101000000).wrapping_add(0x0000000001000000)) & p & 0x0101010101000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0101010101000000;
    let outflank_h = ((o & 0x00000000007e0000).wrapping_add(0x0000000000020000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007e0000;
    let outflank_d9 =
        ((o | !0x2010080402000000).wrapping_add(0x0000000002000000)) & p & 0x2010080402000000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x2010080402000000;
    flipped |= (((p << 8) & 0x0000000000000100) | ((p << 7) & 0x0000000000000200)) & o;

    flipped
}

fn flip_b3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0202020202000000).wrapping_add(0x0000000002000000)) & p & 0x0202020202000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0202020202000000;
    let outflank_h = ((o & 0x00000000007c0000).wrapping_add(0x0000000000040000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007c0000;
    let outflank_d9 =
        ((o | !0x4020100804000000).wrapping_add(0x0000000004000000)) & p & 0x4020100804000000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x4020100804000000;
    flipped |= (((p << 8) & 0x0000000000000200) | ((p << 7) & 0x0000000000000400)) & o;

    flipped
}

fn flip_c3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0404040404000000).wrapping_add(0x0000000004000000)) & p & 0x0404040404000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0404040404000000;
    let outflank_h = OUTFLANK_2[((o >> 17) & 0x3f) as usize] as u64 & (p >> 16);
    flipped |= (FLIPPED_2[outflank_h as usize] as u64) << 17;
    let outflank_d9 =
        ((o | !0x8040201008000000).wrapping_add(0x0000000008000000)) & p & 0x8040201008000000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x8040201008000000;
    flipped |= (((p << 8) & 0x0000000000000400)
        | ((p << 9) & 0x0000000000000200)
        | (((p >> 7) | (p << 7)) & 0x000000002000800))
        & o;

    flipped
}

fn flip_d3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x0808080808000000).wrapping_add(0x0000000008000000)) & p & 0x0808080808000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x0808080808000000;
    let outflank_h = OUTFLANK_3[((o >> 17) & 0x3f) as usize] as u64 & (p >> 16);
    flipped |= FLIPPED_3_H[outflank_h as usize] & 0x0000000000ff0000;
    let outflank_d7 =
        ((o | !0x0000010204000000).wrapping_add(0x0000000004000000)) & p & 0x0000010204000000;
    flipped |= (outflank_d7 - (outflank_d7 >> 24)) & 0x0000010204000000;
    let outflank_d9 =
        ((o | !0x0080402010000000).wrapping_add(0x0000000010000000)) & p & 0x0080402010000000;
    flipped |= (outflank_d9 - u64::from(outflank_d9 != 0)) & 0x0080402010000000;
    flipped |= (((p << 8) & 0x0000000000000800)
        | ((p << 7) & 0x0000000000001000)
        | ((p << 9) & 0x000000000000400))
        & o;

    flipped
}

fn flip_e3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x1010101010000000).wrapping_add(0x0000000010000000)) & p & 0x1010101010000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x1010101010000000;
    let outflank_h = OUTFLANK_4[((o >> 17) & 0x3f) as usize] as u64 & (p >> 16);
    flipped |= FLIPPED_4_H[outflank_h as usize] & 0x0000000000ff0000;
    let outflank_d7 =
        ((o | !0x0001020408000000).wrapping_add(0x0000000008000000)) & p & 0x0001020408000000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0001020408000000;
    let outflank_d9 =
        ((o | !0x0000804020000000).wrapping_add(0x0000000020000000)) & p & 0x0000804020000000;
    flipped |= (outflank_d9 - (outflank_d9 >> 24)) & 0x0000804020000000;
    flipped |= (((p << 8) & 0x0000000000001000)
        | ((p << 7) & 0x0000000000002000)
        | ((p << 9) & 0x000000000000800))
        & o;

    flipped
}

fn flip_f3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x2020202020000000).wrapping_add(0x0000000020000000)) & p & 0x2020202020000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x2020202020000000;
    let outflank_h = OUTFLANK_5[((o >> 17) & 0x3f) as usize] as u64 & (p >> 16);
    flipped |= (FLIPPED_5[outflank_h as usize] as u64) << 17;
    let outflank_d7 =
        ((o | !0x0102040810000000).wrapping_add(0x0000000010000000)) & p & 0x0102040810000000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0102040810000000;
    flipped |= (((p << 8) & 0x0000000000002000)
        | ((p << 7) & 0x0000000000004000)
        | (((p >> 9) | (p << 9)) & 0x0000000040001000))
        & o;

    flipped
}

fn flip_g3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x4040404040000000).wrapping_add(0x0000000040000000)) & p & 0x4040404040000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x4040404040000000;
    let outflank_h = OUTFLANK_7[((o >> 16) & 0x3e) as usize] as u64 & (p >> 15);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 16;
    let outflank_d7 =
        ((o | !0x0204081020000000).wrapping_add(0x0000000020000000)) & p & 0x0204081020000000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0204081020000000;
    flipped |= (((p << 8) & 0x0000000000004000) | ((p << 9) & 0x0000000000002000)) & o;

    flipped
}

fn flip_h3(p: u64, o: u64) -> u64 {
    let outflank_v =
        ((o | !0x8080808080000000).wrapping_add(0x0000000080000000)) & p & 0x8080808080000000;
    let mut flipped = (outflank_v - u64::from(outflank_v != 0)) & 0x8080808080000000;
    let outflank_h = OUTFLANK_7[((o >> 17) & 0x3f) as usize] as u64 & (p >> 16);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 17;
    let outflank_d7 =
        ((o | !0x0408102040000000).wrapping_add(0x0000000040000000)) & p & 0x0408102040000000;
    flipped |= (outflank_d7 - u64::from(outflank_d7 != 0)) & 0x0408102040000000;
    flipped |= (((p << 8) & 0x0000000000008000) | ((p << 9) & 0x0000000000004000)) & o;

    flipped
}

fn flip_a4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0001010101010100).wrapping_mul(0x0102040810204080)) >> 57) as usize]
        as u64
        & (((p & 0x0101010101010101).wrapping_mul(0x0102040810204080)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0001010101010100;
    let outflank_h = ((o & 0x000000007e000000).wrapping_add(0x0000000002000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007e000000;
    let mut flip_d7 = o & 0x0000000000020000;
    flip_d7 |= (flip_d7 >> 7) & o;
    flipped |= flip_d7 & (flip_d7 & (p << 7)).wrapping_neg();
    let outflank_d9 =
        ((o | !0x1008040200000000).wrapping_add(0x0000000200000000)) & p & 0x1008040200000000;
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x1008040200000000;

    flipped
}

fn flip_b4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0002020202020200).wrapping_mul(0x0081020408102040)) >> 57) as usize]
        as u64
        & (((p & 0x0202020202020202).wrapping_mul(0x0081020408102040)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0002020202020200;
    let outflank_h = ((o & 0x000000007c000000).wrapping_add(0x0000000004000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007c000000;
    let mut flip_d7 = o & 0x0000000000040000;
    flip_d7 |= (flip_d7 >> 7) & o;
    flipped |= flip_d7 & (flip_d7 & (p << 7)).wrapping_neg();
    let outflank_d9 =
        ((o | !0x2010080400000000).wrapping_add(0x0000000400000000)) & p & 0x2010080400000000;
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x2010080400000000;

    flipped
}

fn flip_c4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0004040404040400).wrapping_mul(0x0040810204081020)) >> 57) as usize]
        as u64
        & (((p & 0x0404040404040404).wrapping_mul(0x0040810204081020)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0004040404040400;
    let outflank_h = OUTFLANK_2[((o >> 25) & 0x3f) as usize] as u64 & (p >> 24);
    flipped |= (FLIPPED_2[outflank_h as usize] as u64) << 25;
    let mut flip_d7 = o & 0x0000000000080000;
    flip_d7 |= (flip_d7 >> 7) & o;
    flipped |= flip_d7 & (flip_d7 & (p << 7)).wrapping_neg();
    let outflank_d9 =
        ((o | !0x4020100800000000).wrapping_add(0x0000000800000000)) & p & 0x4020100800000000;
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x4020100800000000;
    flipped |= (((p << 9) & 0x00000000000020000) | ((p >> 7) & 0x00000000200000000)) & o;

    flipped
}

fn flip_d4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0008080808080800).wrapping_mul(0x0020408102040810)) >> 57) as usize]
        as u64
        & (((p & 0x0808080808080808).wrapping_mul(0x0020408102040810)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0008080808080800;
    let outflank_h = OUTFLANK_3[((o >> 25) & 0x3f) as usize] as u64 & (p >> 24);
    flipped |= FLIPPED_3_H[outflank_h as usize] & 0x00000000ff000000;
    let outflank_d7 = OUTFLANK_3
        [(((o & 0x0000020408102000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0001020408102040).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[outflank_d7 as usize] & 0x0000020408102000;
    let outflank_d9 = OUTFLANK_3
        [(((o & 0x0040201008040200).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x8040201008040201).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[outflank_d9 as usize] & 0x0040201008040200;

    flipped
}

fn flip_e4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0010101010101000).wrapping_mul(0x0010204081020408)) >> 57) as usize]
        as u64
        & (((p & 0x1010101010101010).wrapping_mul(0x0010204081020408)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0010101010101000;
    let outflank_h = OUTFLANK_4[((o >> 25) & 0x3f) as usize] as u64 & (p >> 24);
    flipped |= FLIPPED_4_H[outflank_h as usize] & 0x00000000ff000000;
    let outflank_d7 = OUTFLANK_4
        [(((o & 0x0002040810204000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0102040810204080).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[outflank_d7 as usize] & 0x0002040810204000;
    let outflank_d9 = OUTFLANK_4
        [(((o & 0x0000402010080400).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0080402010080402).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[outflank_d9 as usize] & 0x0000402010080400;

    flipped
}

fn flip_f4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0020202020202000).wrapping_mul(0x0008102040810204)) >> 57) as usize]
        as u64
        & (((p & 0x2020202020202020).wrapping_mul(0x0008102040810204)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0020202020202000;
    let outflank_h = OUTFLANK_5[((o >> 25) & 0x3f) as usize] as u64 & (p >> 24);
    flipped |= (FLIPPED_5[outflank_h as usize] as u64) << 25;
    let outflank_d7 =
        ((o | !0x0204081000000000).wrapping_add(0x0000001000000000)) & p & 0x0204081000000000;
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0204081000000000;
    let mut flip_d9 = o & 0x0000000000100000;
    flip_d9 |= (flip_d9 >> 9) & o;
    flipped |= flip_d9 & (flip_d9 & (p << 9)).wrapping_neg();
    flipped |= (((p << 7) & 0x0000000000400000) | ((p >> 9) & 0x0000004000000000)) & o;

    flipped
}

fn flip_g4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0040404040404000).wrapping_mul(0x0004081020408102)) >> 57) as usize]
        as u64
        & (((p & 0x4040404040404040).wrapping_mul(0x0004081020408102)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0040404040404000;
    let outflank_h = OUTFLANK_7[((o >> 24) & 0x3e) as usize] as u64 & (p >> 23);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 24;
    let outflank_d7 =
        ((o | !0x0408102000000000).wrapping_add(0x0000002000000000)) & p & 0x0408102000000000;
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0408102000000000;
    let mut flip_d9 = o & 0x0000000000200000;
    flip_d9 |= (flip_d9 >> 9) & o;
    flipped |= flip_d9 & (flip_d9 & (p << 9)).wrapping_neg();

    flipped
}

fn flip_h4(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_3
        [(((o & 0x0080808080808000).wrapping_mul(0x0002040810204081)) >> 57) as usize]
        as u64
        & (((p & 0x8080808080808080).wrapping_mul(0x0002040810204081)) >> 56);
    let mut flipped = FLIPPED_3_V[outflank_v as usize] & 0x0080808080808000;
    let outflank_h = OUTFLANK_7[((o >> 25) & 0x3f) as usize] as u64 & (p >> 24);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 25;
    let outflank_d7 =
        ((o | !0x0810204000000000).wrapping_add(0x0000004000000000)) & p & 0x0810204000000000;
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0810204000000000;
    let mut flip_d9 = o & 0x0000000000400000;
    flip_d9 |= (flip_d9 >> 9) & o;
    flipped |= flip_d9 & (flip_d9 & (p << 9)).wrapping_neg();

    flipped
}

fn flip_a5(p: u64, o: u64) -> u64 {
    let outflank_a1a5d8 = OUTFLANK_4
        [(((o & 0x0004020101010100).wrapping_mul(0x0102040810101010)) >> 57) as usize]
        as u64
        & (((p & 0x0804020101010101).wrapping_mul(0x0102040810101010)) >> 56);
    let mut flipped = FLIPPED_4_V[outflank_a1a5d8 as usize] & 0x0004020101010100;
    let outflank_a8a5e1 = OUTFLANK_3
        [(((o & 0x0001010102040800).wrapping_mul(0x0808080808040201)) >> 57) as usize]
        as u64
        & (((p & 0x0101010102040810).wrapping_mul(0x0808080808040201)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_a8a5e1) as usize] & 0x0001010102040800;
    let outflank_h = ((o & 0x0000007e00000000).wrapping_add(0x0000000200000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007e00000000;

    flipped
}

fn flip_b5(p: u64, o: u64) -> u64 {
    let outflank_b1b5e8 = OUTFLANK_4
        [(((o & 0x0008040202020200).wrapping_mul(0x0081020408080808)) >> 57) as usize]
        as u64
        & (((p & 0x1008040202020202).wrapping_mul(0x0081020408080808)) >> 56);
    let mut flipped = FLIPPED_4_V[outflank_b1b5e8 as usize] & 0x0008040202020200;
    let outflank_b8b5f1 = OUTFLANK_3
        [(((o & 0x0002020204081000).wrapping_mul(0x0808080808040201)) >> 58) as usize]
        as u64
        & ((((p & 0x0202020204081020) >> 1).wrapping_mul(0x0808080808040201)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_b8b5f1) as usize] & 0x0002020204081000;
    let outflank_h = ((o & 0x0000007c00000000).wrapping_add(0x0000000400000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007c00000000;

    flipped
}

fn flip_c5(p: u64, o: u64) -> u64 {
    let outflank_c1c5f8 = OUTFLANK_4
        [(((o & 0x0010080404040400).wrapping_mul(0x0040810204040404)) >> 57) as usize]
        as u64
        & (((p & 0x2010080404040404).wrapping_mul(0x0040810204040404)) >> 56);
    let mut flipped = FLIPPED_4_V[outflank_c1c5f8 as usize] & 0x0010080404040400;
    let outflank_c8c5g1 = OUTFLANK_3
        [(((o & 0x0004040408102000).wrapping_mul(0x0002020202010080)) >> 57) as usize]
        as u64
        & ((((p & 0x0404040408102040) >> 2).wrapping_mul(0x0808080808040201)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_c8c5g1) as usize] & 0x0004040408102000;
    let outflank_h = OUTFLANK_2[((o >> 33) & 0x3f) as usize] as u64 & (p >> 32);
    flipped |= (FLIPPED_2[(outflank_h) as usize] as u64) << 33;
    flipped |= (((p << 9) & 0x0000000002000000) | ((p >> 7) & 0x0000020000000000)) & o;

    flipped
}

fn flip_d5(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_4
        [(((o & 0x0008080808080800).wrapping_mul(0x0020408102040810)) >> 57) as usize]
        as u64
        & (((p & 0x0808080808080808).wrapping_mul(0x0020408102040810)) >> 56);
    let mut flipped = FLIPPED_4_V[outflank_v as usize] & 0x0008080808080800;
    let outflank_h = OUTFLANK_3[((o >> 33) & 0x3f) as usize] as u64 & (p >> 32);
    flipped |= FLIPPED_3_H[(outflank_h) as usize] & 0x000000ff00000000;
    let outflank_d7 = OUTFLANK_3
        [(((o & 0x0002040810204000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0102040810204080).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[(outflank_d7) as usize] & 0x0002040810204000;
    let outflank_d9 = OUTFLANK_3
        [(((o & 0x0020100804020000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x4020100804020100).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[(outflank_d9) as usize] & 0x0020100804020000;

    flipped
}

fn flip_e5(p: u64, o: u64) -> u64 {
    let outflank_v = OUTFLANK_4
        [(((o & 0x0010101010101000).wrapping_mul(0x0010204081020408)) >> 57) as usize]
        as u64
        & (((p & 0x1010101010101010).wrapping_mul(0x0010204081020408)) >> 56);
    let mut flipped = FLIPPED_4_V[(outflank_v) as usize] & 0x0010101010101000;
    let outflank_h = OUTFLANK_4[((o >> 33) & 0x3f) as usize] as u64 & (p >> 32);
    flipped |= FLIPPED_4_H[(outflank_h) as usize] & 0x000000ff00000000;
    let outflank_d7 = OUTFLANK_4
        [(((o & 0x0004081020400000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0204081020408000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[(outflank_d7) as usize] & 0x0004081020400000;
    let outflank_d9 = OUTFLANK_4
        [(((o & 0x0040201008040200).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x8040201008040201).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[(outflank_d9) as usize] & 0x0040201008040200;

    flipped
}

fn flip_f5(p: u64, o: u64) -> u64 {
    let outflank_b1f5f8 = OUTFLANK_4
        [(((o & 0x0020202010080400).wrapping_mul(0x0080808080810204)) >> 57) as usize]
        as u64
        & (((p & 0x2020202010080402).wrapping_mul(0x0080808080810204)) >> 56);
    let mut flipped = FLIPPED_4_V[outflank_b1f5f8 as usize] & 0x0020202010080400;
    let outflank_c8f5f1 = OUTFLANK_3
        [(((o & 0x0008102020202000).wrapping_mul(0x0002010080404040)) >> 57) as usize]
        as u64
        & ((((p & 0x0408102020202020) >> 2).wrapping_mul(0x1008040201010101)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_c8f5f1) as usize] & 0x0008102020202000;
    let outflank_h = OUTFLANK_5[((o >> 33) & 0x3f) as usize] as u64 & (p >> 32);
    flipped |= (FLIPPED_5[(outflank_h) as usize] as u64) << 33;
    flipped |= (((p << 7) & 0x0000000040000000) | ((p >> 9) & 0x0000400000000000)) & o;

    flipped
}

fn flip_g5(p: u64, o: u64) -> u64 {
    let outflank_c1g5g8 = OUTFLANK_4
        [(((o & 0x0040404020100800).wrapping_mul(0x0040404040408102)) >> 57) as usize]
        as u64
        & (((p & 0x4040404020100804).wrapping_mul(0x0040404040408102)) >> 56);
    let mut flipped = FLIPPED_4_V[(outflank_c1g5g8) as usize] & 0x0040404020100800;
    let outflank_d8g5g1 = OUTFLANK_3
        [(((o & 0x0010204040404000).wrapping_mul(0x0001008040202020)) >> 57) as usize]
        as u64
        & ((((p & 0x0810204040404040) >> 3).wrapping_mul(0x1008040201010101)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_d8g5g1) as usize] & 0x0010204040404000;
    let outflank_h = OUTFLANK_7[((o >> 32) & 0x3e) as usize] as u64 & (p >> 31);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 32;

    flipped
}

fn flip_h5(p: u64, o: u64) -> u64 {
    let outflank_d1h5h8 = OUTFLANK_4
        [(((o & 0x0080808040201000).wrapping_mul(0x0020202020204081)) >> 57) as usize]
        as u64
        & (((p & 0x8080808040201008).wrapping_mul(0x0020202020204081)) >> 56);
    let mut flipped = FLIPPED_4_V[(outflank_d1h5h8) as usize] & 0x0080808040201000;
    let outflank_e8h5h1 = OUTFLANK_3
        [(((o & 0x0020408080808000).wrapping_mul(0x0000804020101010)) >> 57) as usize]
        as u64
        & ((((p & 0x1020408080808080) >> 4).wrapping_mul(0x1008040201010101)) >> 56);
    flipped |= FLIPPED_3_U[(outflank_e8h5h1) as usize] & 0x0020408080808000;
    let outflank_h = OUTFLANK_7[((o >> 33) & 0x3f) as usize] as u64 & (p >> 32);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 33;

    flipped
}

fn flip_a6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000000101010100) ^ 0x0000000101010101).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000000101010100;
    let outflank_h = ((o & 0x00007e0000000000).wrapping_add(0x0000020000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007e0000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000000204081000) ^ 0x0000000204081020).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000000204081000;
    flipped |= (((p >> 8) & 0x0001000000000000) | ((p >> 9) & 0x0002000000000000)) & o;

    flipped
}

fn flip_b6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000000202020200) ^ 0x0000000202020202).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000000202020200;
    let outflank_h = ((o & 0x00007c0000000000).wrapping_add(0x0000040000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007c0000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000000408102000) ^ 0x0000000408102040).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000000408102000;
    flipped |= (((p >> 8) & 0x0002000000000000) | ((p >> 9) & 0x0004000000000000)) & o;

    flipped
}

fn flip_c6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000000404040400) ^ 0x0000000404040404).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000000404040400;
    let outflank_h = OUTFLANK_2[((o >> 41) & 0x3f) as usize] as u64 & (p >> 40);
    flipped |= (FLIPPED_2[(outflank_h) as usize] as u64) << 41;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000000810204000) ^ 0x0000000810204080).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000000810204000;
    flipped |= (((p >> 8) & 0x0004000000000000)
        | ((p >> 7) & 0x0002000000000000)
        | (((p >> 9) | (p << 9)) & 0x0008000200000000))
        & o;

    flipped
}

fn flip_d6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000000808080800) ^ 0x0000000808080808).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000000808080800;
    let outflank_h = OUTFLANK_3[((o >> 41) & 0x3f) as usize] as u64 & (p >> 40);
    flipped |= FLIPPED_3_H[(outflank_h) as usize] & 0x0000ff0000000000;
    let outflank_d = OUTFLANK_3
        [(((o & 0x0000001422400000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0000001422418000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[(outflank_d) as usize] & 0x0000001422400000; // A3D6H2
    flipped |= (((p >> 8) & 0x0008000000000000)
        | ((p >> 9) & 0x0010000000000000)
        | ((p >> 7) & 0x0004000000000000))
        & o;

    flipped
}

fn flip_e6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000001010101000) ^ 0x0000001010101010).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000001010101000;
    let outflank_h = OUTFLANK_4[((o >> 41) & 0x3f) as usize] as u64 & (p >> 40);
    flipped |= FLIPPED_4_H[(outflank_h) as usize] & 0x0000ff0000000000;
    let outflank_d = OUTFLANK_4
        [(((o & 0x0000002844020000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0000002844820100).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[(outflank_d) as usize] & 0x0000002844020000; // A2E6H3
    flipped |= (((p >> 8) & 0x0010000000000000)
        | ((p >> 9) & 0x0020000000000000)
        | ((p >> 7) & 0x0008000000000000))
        & o;

    flipped
}

fn flip_f6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000002020202000) ^ 0x0000002020202020).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000002020202000;
    let outflank_h = OUTFLANK_5[((o >> 41) & 0x3f) as usize] as u64 & (p >> 40);
    flipped |= (FLIPPED_5[(outflank_h) as usize] as u64) << 41;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000001008040200) ^ 0x0000001008040201).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000001008040200;
    flipped |= (((p >> 8) & 0x0020000000000000)
        | ((p >> 9) & 0x0040000000000000)
        | (((p >> 7) | (p << 7)) & 0x0010004000000000))
        & o;

    flipped
}

fn flip_g6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000004040404000) ^ 0x0000004040404040).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000004040404000;
    let outflank_h = OUTFLANK_7[((o >> 40) & 0x3e) as usize] as u64 & (p >> 39);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 40;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000002010080400) ^ 0x0000002010080402).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000002010080400;
    flipped |= (((p >> 8) & 0x0040000000000000) | ((p >> 7) & 0x0020000000000000)) & o;

    flipped
}

fn flip_h6(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000008080808000) ^ 0x0000008080808080).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000008080808000;
    let outflank_h = OUTFLANK_7[((o >> 41) & 0x3f) as usize] as u64 & (p >> 40);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 41;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000004020100800) ^ 0x0000004020100804).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000004020100800;
    flipped |= (((p >> 8) & 0x0080000000000000) | ((p >> 7) & 0x0040000000000000)) & o;

    flipped
}

fn flip_a7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000010101010100) ^ 0x0000010101010101).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000010101010100;
    let outflank_h = ((o & 0x007e000000000000).wrapping_add(0x0002000000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x007e000000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000020408102000) ^ 0x0000020408102040).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000020408102000;

    flipped
}

fn flip_b7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000020202020200) ^ 0x0000020202020202).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000020202020200;
    let outflank_h = ((o & 0x007c000000000000).wrapping_add(0x0004000000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x007c000000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000040810204000) ^ 0x0000040810204080).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000040810204000;

    flipped
}

fn flip_c7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000040404040400) ^ 0x0000040404040404).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000040404040400;
    let outflank_h = OUTFLANK_2[((o >> 49) & 0x3f) as usize] as u64 & (p >> 48);
    flipped |= (FLIPPED_2[(outflank_h) as usize] as u64) << 49;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0000081020400000) ^ 0x0000081020408000).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0000081020400000;
    flipped |= (p << 9) & 0x0000020000000000 & o;

    flipped
}

fn flip_d7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000080808080800) ^ 0x0000080808080808).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000080808080800;
    let outflank_h = OUTFLANK_3[((o >> 49) & 0x3f) as usize] as u64 & (p >> 48);
    flipped |= FLIPPED_3_H[(outflank_h) as usize] & 0x00ff000000000000;
    let outflank_d = OUTFLANK_3
        [(((o & 0x0000142240000000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0000142241800000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[(outflank_d) as usize] & 0x0000142240000000; // A4D7H3

    flipped
}

fn flip_e7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000101010101000) ^ 0x0000101010101010).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000101010101000;
    let outflank_h = OUTFLANK_4[((o >> 49) & 0x3f) as usize] as u64 & (p >> 48);
    flipped |= FLIPPED_4_H[(outflank_h) as usize] & 0x00ff000000000000;
    let outflank_d = OUTFLANK_4
        [(((o & 0x0000284402000000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0000284482010000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[(outflank_d) as usize] & 0x0000284402000000; // A3E7H4

    flipped
}

fn flip_f7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000202020202000) ^ 0x0000202020202020).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000202020202000;
    let outflank_h = OUTFLANK_5[((o >> 49) & 0x3f) as usize] as u64 & (p >> 48);
    flipped |= (FLIPPED_5[(outflank_h) as usize] as u64) << 49;
    flipped |= (p << 7) & 0x0000400000000000 & o;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000100804020000) ^ 0x0000100804020100).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000100804020000;

    flipped
}

fn flip_g7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000404040404000) ^ 0x0000404040404040).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000404040404000;
    let outflank_h = OUTFLANK_7[((o >> 48) & 0x3e) as usize] as u64 & (p >> 47);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 48;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000201008040200) ^ 0x0000201008040201).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000201008040200;

    flipped
}

fn flip_h7(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0000808080808000) ^ 0x0000808080808080).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0000808080808000;
    let outflank_h = OUTFLANK_7[((o >> 49) & 0x3f) as usize] as u64 & (p >> 48);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 49;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0000402010080400) ^ 0x0000402010080402).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0000402010080400;

    flipped
}

fn flip_a8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0001010101010100) ^ 0x0001010101010101).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0001010101010100;
    let outflank_h = ((o & 0x7e00000000000000).wrapping_add(0x0200000000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x7e00000000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0002040810204000) ^ 0x0002040810204080).leading_zeros()) & p;
    flipped |= (outflank_d7.wrapping_neg().wrapping_mul(2)) & 0x0002040810204000;

    flipped
}

fn flip_b8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0002020202020200) ^ 0x0002020202020202).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0002020202020200;
    let outflank_h = ((o & 0x7c00000000000000).wrapping_add(0x0400000000000000)) & p;
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x7c00000000000000;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0004081020400000) ^ 0x0004081020408000).leading_zeros()) & p;
    flipped |= (0x8000000000000000 - outflank_d7.wrapping_mul(2)) & 0x0004081020400000;

    flipped
}

fn flip_c8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0004040404040400) ^ 0x0004040404040404).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0004040404040400;
    let outflank_h = OUTFLANK_2[((o >> 57) & 0x3f) as usize] as u64 & (p >> 56);
    flipped |= (FLIPPED_2[(outflank_h) as usize] as u64) << 57;
    let outflank_d7 =
        (0x8000000000000000 >> ((o & 0x0008102040000000) ^ 0x0008102040800000).leading_zeros()) & p;
    flipped |= (0x8000000000000000 - outflank_d7.wrapping_mul(2)) & 0x0008102040000000;
    flipped |= (p << 9) & 0x0002000000000000 & o;

    flipped
}

fn flip_d8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0008080808080800) ^ 0x0008080808080808).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0008080808080800;
    let outflank_h = OUTFLANK_3[((o >> 57) & 0x3f) as usize] as u64 & (p >> 56);
    flipped |= FLIPPED_3_H[(outflank_h) as usize] & 0xff00000000000000;
    let outflank_d = OUTFLANK_3
        [(((o & 0x0014224000000000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0014224180000000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_3_H[(outflank_d) as usize] & 0x0014224000000000; // A5D8H4

    flipped
}

fn flip_e8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0010101010101000) ^ 0x0010101010101010).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0010101010101000;
    let outflank_h = OUTFLANK_4[((o >> 57) & 0x3f) as usize] as u64 & (p >> 56);
    flipped |= FLIPPED_4_H[(outflank_h) as usize] & 0xff00000000000000;
    let outflank_d = OUTFLANK_4
        [(((o & 0x0028440200000000).wrapping_mul(0x0101010101010101)) >> 57) as usize]
        as u64
        & (((p & 0x0028448201000000).wrapping_mul(0x0101010101010101)) >> 56);
    flipped |= FLIPPED_4_H[(outflank_d) as usize] & 0x0028440200000000; // A4E8H5

    flipped
}

fn flip_f8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0020202020202000) ^ 0x0020202020202020).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0020202020202000;
    let outflank_h = OUTFLANK_5[((o >> 57) & 0x3f) as usize] as u64 & (p >> 56);
    flipped |= (FLIPPED_5[(outflank_h) as usize] as u64) << 57;
    flipped |= (p << 7) & 0x0040000000000000 & o;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0010080402000000) ^ 0x0010080402010000).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0010080402000000;

    flipped
}

fn flip_g8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0040404040404000) ^ 0x0040404040404040).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0040404040404000;
    let outflank_h = OUTFLANK_7[((o >> 56) & 0x3e) as usize] as u64 & (p >> 55);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3e) << 56;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0020100804020000) ^ 0x0020100804020100).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0020100804020000;

    flipped
}

fn flip_h8(p: u64, o: u64) -> u64 {
    let outflank_v =
        (0x8000000000000000 >> ((o & 0x0080808080808000) ^ 0x0080808080808080).leading_zeros()) & p;
    let mut flipped = (outflank_v.wrapping_neg().wrapping_mul(2)) & 0x0080808080808000;
    let outflank_h = OUTFLANK_7[((o >> 57) & 0x3f) as usize] as u64 & (p >> 56);
    flipped |= ((outflank_h.wrapping_neg()) & 0x3f) << 57;
    let outflank_d9 =
        (0x8000000000000000 >> ((o & 0x0040201008040200) ^ 0x0040201008040201).leading_zeros()) & p;
    flipped |= (outflank_d9.wrapping_neg().wrapping_mul(2)) & 0x0040201008040200;

    flipped
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::othello::{get_moves::tests::move_test_cases, position::print_bitset};

    /// Naive implementation of `get_flipped` for testing.
    pub fn get_flipped_simple(player: u64, opponent: u64, index: usize) -> u64 {
        let move_x = index % 8;
        let move_y = index / 8;

        const DIRECTIONS: [(i32, i32); 8] = [
            (-1, -1),
            (-1, 0),
            (-1, 1),
            (0, -1),
            (0, 1),
            (1, -1),
            (1, 0),
            (1, 1),
        ];

        let mut flipped = 0u64;

        for (dx, dy) in DIRECTIONS {
            let mut direction_flipped = 0u64;

            for distance in 1..=7 {
                let square_x = move_x as i32 + distance * dx;
                let square_y = move_y as i32 + distance * dy;

                if !(0..8).contains(&square_x) || !(0..8).contains(&square_y) {
                    break;
                }

                let square_mask = 1u64 << (square_y * 8 + square_x);

                // Square has opponent's piece
                if square_mask & opponent != 0 {
                    direction_flipped |= square_mask;
                    continue;
                }

                // Square has player's piece
                if square_mask & player != 0 {
                    flipped |= direction_flipped;
                    break;
                }

                // Square is empty
                break;
            }
        }

        flipped
    }

    /// Naive implementation of `get_flipped` from Edax.
    pub fn get_flipped_edax_slow(player: u64, opponent: u64, index: usize) -> u64 {
        fn x_to_bit(x: i32) -> u64 {
            1u64 << (x as usize)
        }

        const DIR: [i32; 8] = [-9, -8, -7, -1, 1, 7, 8, 9];

        const EDGE: [u64; 8] = [
            0x01010101010101ff,
            0x00000000000000ff,
            0x80808080808080ff,
            0x0101010101010101,
            0x8080808080808080,
            0xff01010101010101,
            0xff00000000000000,
            0xff80808080808080,
        ];

        let mut flipped = 0;

        for d in 0..8 {
            if (x_to_bit(index as i32) & EDGE[d]) == 0 {
                let mut f = 0;
                let mut x = index as i32 + DIR[d];
                while (opponent & x_to_bit(x)) != 0 && (x_to_bit(x) & EDGE[d]) == 0 {
                    f |= x_to_bit(x);
                    x += DIR[d];
                }
                if (player & x_to_bit(x)) != 0 {
                    flipped |= f;
                }
            }
        }

        flipped
    }

    #[test]
    fn test_get_flipped() {
        let test_cases = move_test_cases();

        for position in &test_cases {
            for move_ in position.iter_move_indices() {
                if move_ == 27 || move_ == 28 || move_ == 35 || move_ == 36 {
                    continue;
                }

                let player = position.player();
                let opponent = position.opponent();

                let simple = get_flipped_simple(player, opponent, move_);
                let get_flipped = get_flipped(player, opponent, move_);
                let slow = get_flipped_edax_slow(player, opponent, move_);

                if get_flipped != simple && get_flipped != slow {
                    println!("move = {}", move_);

                    println!("position:");
                    println!(
                        "Position::new_from_bitboards(0x{:x}, 0x{:x})",
                        player, opponent
                    );
                    println!("{}", position);

                    println!("simple:");
                    print_bitset(simple);

                    println!("get_flipped:");
                    print_bitset(get_flipped);

                    println!("slow:");
                    print_bitset(slow);

                    panic!();
                }
            }
        }
    }
}
